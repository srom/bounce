'use strict';

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Ball');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ball = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Ball, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Ball.displayName = 'proto.Ball';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Ball.prototype.toObject = function (opt_includeInstance) {
    return proto.Ball.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Ball} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Ball.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      xPx: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
      yPx: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
      radiusPx: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
      linearVelocityXM: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
      linearVelocityYM: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
      canmove: jspb.Message.getFieldWithDefault(msg, 6, false),
      bouncing: jspb.Message.getFieldWithDefault(msg, 7, false),
      dead: jspb.Message.getFieldWithDefault(msg, 8, false)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ball}
 */
proto.Ball.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ball();
  return proto.Ball.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ball} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ball}
 */
proto.Ball.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */reader.readFloat();
        msg.setXPx(value);
        break;
      case 2:
        var value = /** @type {number} */reader.readFloat();
        msg.setYPx(value);
        break;
      case 3:
        var value = /** @type {number} */reader.readFloat();
        msg.setRadiusPx(value);
        break;
      case 4:
        var value = /** @type {number} */reader.readFloat();
        msg.setLinearVelocityXM(value);
        break;
      case 5:
        var value = /** @type {number} */reader.readFloat();
        msg.setLinearVelocityYM(value);
        break;
      case 6:
        var value = /** @type {boolean} */reader.readBool();
        msg.setCanmove(value);
        break;
      case 7:
        var value = /** @type {boolean} */reader.readBool();
        msg.setBouncing(value);
        break;
      case 8:
        var value = /** @type {boolean} */reader.readBool();
        msg.setDead(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ball.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Ball.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ball} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ball.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getXPx();
  if (f !== 0.0) {
    writer.writeFloat(1, f);
  }
  f = message.getYPx();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
  f = message.getRadiusPx();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
  f = message.getLinearVelocityXM();
  if (f !== 0.0) {
    writer.writeFloat(4, f);
  }
  f = message.getLinearVelocityYM();
  if (f !== 0.0) {
    writer.writeFloat(5, f);
  }
  f = message.getCanmove();
  if (f) {
    writer.writeBool(6, f);
  }
  f = message.getBouncing();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getDead();
  if (f) {
    writer.writeBool(8, f);
  }
};

/**
 * optional float x_px = 1;
 * @return {number}
 */
proto.Ball.prototype.getXPx = function () {
  return (/** @type {number} */+jspb.Message.getFieldWithDefault(this, 1, 0.0)
  );
};

/** @param {number} value */
proto.Ball.prototype.setXPx = function (value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional float y_px = 2;
 * @return {number}
 */
proto.Ball.prototype.getYPx = function () {
  return (/** @type {number} */+jspb.Message.getFieldWithDefault(this, 2, 0.0)
  );
};

/** @param {number} value */
proto.Ball.prototype.setYPx = function (value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional float radius_px = 3;
 * @return {number}
 */
proto.Ball.prototype.getRadiusPx = function () {
  return (/** @type {number} */+jspb.Message.getFieldWithDefault(this, 3, 0.0)
  );
};

/** @param {number} value */
proto.Ball.prototype.setRadiusPx = function (value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional float linear_velocity_x_m = 4;
 * @return {number}
 */
proto.Ball.prototype.getLinearVelocityXM = function () {
  return (/** @type {number} */+jspb.Message.getFieldWithDefault(this, 4, 0.0)
  );
};

/** @param {number} value */
proto.Ball.prototype.setLinearVelocityXM = function (value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional float linear_velocity_y_m = 5;
 * @return {number}
 */
proto.Ball.prototype.getLinearVelocityYM = function () {
  return (/** @type {number} */+jspb.Message.getFieldWithDefault(this, 5, 0.0)
  );
};

/** @param {number} value */
proto.Ball.prototype.setLinearVelocityYM = function (value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional bool canMove = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Ball.prototype.getCanmove = function () {
  return (/** @type {boolean} */jspb.Message.getFieldWithDefault(this, 6, false)
  );
};

/** @param {boolean} value */
proto.Ball.prototype.setCanmove = function (value) {
  jspb.Message.setField(this, 6, value);
};

/**
 * optional bool bouncing = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Ball.prototype.getBouncing = function () {
  return (/** @type {boolean} */jspb.Message.getFieldWithDefault(this, 7, false)
  );
};

/** @param {boolean} value */
proto.Ball.prototype.setBouncing = function (value) {
  jspb.Message.setField(this, 7, value);
};

/**
 * optional bool dead = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Ball.prototype.getDead = function () {
  return (/** @type {boolean} */jspb.Message.getFieldWithDefault(this, 8, false)
  );
};

/** @param {boolean} value */
proto.Ball.prototype.setDead = function (value) {
  jspb.Message.setField(this, 8, value);
};